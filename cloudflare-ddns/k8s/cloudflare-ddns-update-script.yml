apiVersion: v1
kind: ConfigMap
metadata:
  name: ddns-update-script
  namespace: cloudflare-ddns
data:
  ddns-update.py: |
    import os
    import re
    import requests
    import json
    import logging

    # Load environment variables
    auth_email = os.getenv('auth_email')
    auth_method = os.getenv('auth_method')
    auth_key = os.getenv('auth_key')
    zone_identifier = os.getenv('zone_identifier')
    record_name = os.getenv('record_name')
    ttl = int(os.getenv('ttl'))
    proxy = os.getenv('proxy')

    # Define regex pattern for IPv4 validation
    ipv4_regex = r'([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])'

    # Function to get public IP
    def get_public_ip():
        ip = None
        try:
            # Attempt to get IP from Cloudflare
            response = requests.get('https://cloudflare.com/cdn-cgi/trace')
            if response.status_code == 200:
                ip_match = re.search(r'^ip=(\d+\.\d+\.\d+\.\d+)', response.text, flags=re.MULTILINE)
                if ip_match:
                    ip = ip_match.group(1)
        except Exception as e:
            logging.error(f"Failed to retrieve IP from Cloudflare: {str(e)}")

        if not ip:
            # If Cloudflare fails, try other services
            try:
                response = requests.get('https://api.ipify.org')
                if response.status_code == 200:
                    ip = response.text.strip()
                else:
                    response = requests.get('https://ipv4.icanhazip.com')
                    if response.status_code == 200:
                        ip = response.text.strip()
            except Exception as e:
                logging.error(f"Failed to retrieve IP from alternative services: {str(e)}")

        return ip

    # Function to update Cloudflare record
    def update_cloudflare_record(ip):
        if not re.match(ipv4_regex, ip):
            logging.error(f"Invalid IP format: {ip}")
            return False

        auth_header = "X-Auth-Key" if auth_method == "global" else "Authorization"
        headers = {
            "X-Auth-Email": auth_email,
            auth_header: auth_key,
            "Content-Type": "application/json"
        }

        try:
            # Fetch DNS record
            response = requests.get(f"https://api.cloudflare.com/client/v4/zones/{zone_identifier}/dns_records?type=A&name={record_name}", headers=headers)
            if response.status_code != 200:
                logging.error(f"Failed to fetch DNS record: {response.text}")
                return False

            record_data = response.json()
            if record_data['result_info']['count'] == 0:
                logging.error(f"Record does not exist: {record_name}")
                return False

            # Extract existing IP
            old_ip = record_data['result'][0]['content']

            # Compare IPs
            if ip == old_ip:
                logging.info(f"IP ({ip}) for {record_name} has not changed.")
                return True

            # Update IP
            record_id = record_data['result'][0]['id']
            update_data = {
                "type": "A",
                "name": record_name,
                "content": ip,
                "ttl": ttl,
                "proxied": bool(proxy)
            }
            response = requests.put(f"https://api.cloudflare.com/client/v4/zones/{zone_identifier}/dns_records/{record_id}", headers=headers, json=update_data)
            if response.status_code != 200:
                logging.error(f"Failed to update DNS record: {response.text}")
                return False

            logging.info(f"Updated IP for {record_name} from {old_ip} to {ip}")
            return True

        except Exception as e:
            logging.error(f"Exception occurred: {str(e)}")
            return False

    # Main script execution
    if __name__ == "__main__":
        logging.basicConfig(level=logging.INFO)

        # Get public IP
        public_ip = get_public_ip()
        if not public_ip:
            logging.error("Failed to retrieve public IP.")
            exit(1)

        # Update Cloudflare record
        if not update_cloudflare_record(public_ip):
            exit(1)
